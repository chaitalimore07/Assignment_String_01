  # Assignment Questions 7 -->

  # Question 1
  # Given two strings s and t, determine if they are isomorphic.
  # Two strings s and t are isomorphic if the characters in s can be replaced to get t.
  # All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
  # Example 1: -->

  # s = "egg", t = "add"

def isisomorphic(s, t):
    if len(s) != len(t):
        return False
    else:
        map1, map2 = {}, {}
        for i in range(len(s)):
            ch1, ch2 = s[i], t[i]
            if ch1 not in map1:
                map1[ch1] = ch2
            if ch2 not in map2:
                map2[ch2] = ch1
            if map1[ch1] != ch2 or map2[ch2] != ch1:
                return False
    return True


s = "egg"
t = "add"
print(isisomorphic(s, t))  

.......................................................................................................................................................

# Question 2
# Given a string num which represents an integer, return true if num is a strobogrammatic number.
# A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
# Example 1:
num = "69"
# Output:
# true

class Solution(object):
    def isStrobogrammatic(self, num):
      
        maps = {("0", "0"), ("1", "1"), ("6", "9"), ("8", "8"), ("9", "6")}
        i,j = 0, len(num) - 1
        while i <= j:
            if (num[i], num[j]) not in maps:
                return False
            i += 1
            j -= 1
        return True
ob = Solution()
num : "69"
print(ob.isStrobogrammatic(num))

....................................................................................................................................................

# Question 3
# Given two non-negative integers, num1 and num2 represented as string, return  the sum of num1 and num2 as a string.
# You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs 
# to integers directly.
# Example 1:
num1 = "11"
num2 = "123"
# Output:
# "134"

class Solution(object):
    def addStrings(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        return str(int(num1)+int(num2))
        
ob = Solution()
num1 = "11"
num2 = "123"
print(ob.addStrings(num1,num2))


.......................................................................................................................................................

# Question 5
# Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.
# If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters
# and leave the other as original.
# Example 1:
s = "abcdefg"
k = 2
# Output:
"bacdfeg"
# ==>
class Solution:
   def reverseStr(self, s, k):
      l = list(s)
      i = k-1
      while i < len(l)+k:
         a = l[:i-k+1]
         b = l[i-k+1:i+1]
         c = l[i+1:]
         l = a + b[::-1] + c
         i += 2*k
      return ''.join(l)

ob = Solution()
print(ob.reverseStr("abcdefg", 2))


.....................................................................................................................................................
# Question 4
# Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.
# Example 1:
# Input: s = "Let's take LeetCode contest"
# Output: "s'teL ekat edoCteeL tsetnoc"

# ==>
# Python3 program to reverse individual words
# reverses individual words of a string


def reverseWords(s):
	st = list()

	# Traverse given string and push all characters
	# to stack until we see a space.
	for i in range(len(s)):
		if s[i] != " ":
			st.append(s[i])

		# When we see a space, we print
		# contents of stack.
		else:
			while len(st) > 0:
				print(st[-1], end="")
				st.pop()
			print(end=" ")

	# Since there may not be space after
	# last word.
	while len(st) > 0:
		print(st[-1], end="")
		st.pop()


# Driver Code
if __name__ == "__main__":
	s = "Let's take LeetCode contest"
	reverseWords(s)

........................................................................................................................................

# Question 6
# Given two strings s and goal, return true if and only if* s can become goal after some number of shifts on s.
# A shift on s consists of moving the leftmost character of s to the rightmost position.
# For example, if s = "abcde", then it will be "bcdea" after one shift.
# Example 1:
s = "abcde"
goal = "cdeab"
# Output:
# true

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        
        for i in range(len(s)):
            s = s[1:]+s[0] #Rotate the string by 1 element
            
            if(s==goal): #Compare the string with goal.
                return True
        return False
    
ob = Solution()
s = "abcde"
goal = "cdeab"
print(ob.rotateString(s,goal))

.......................................................................................................................................................
# Question 7
# Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
# Note that after backspacing an empty text, the text will continue empty.
# Example 1:
s = "ab#c"
t = "ad#c"
# Output: true
# Explanation:
# Both s and t become "ac".
# ==>

# Python implementation to Check if two strings after processing backspace character are equal or not
# function to compare the two strings
def removeBackspace(s) -> str:
	n = len(s)
	# To point at position after considering the backspaces
	idx = 0
	for i in range(0, n):
		if(s[i] != '#'):
			s = s[:idx] + s[i] + s[idx+1:]
			idx += 1
		elif(s[i] == '#' and idx >= 0):
			idx -= 1
		# This idx can never point at negative index position
		if(idx < 0):
			idx = 0
	ans = ""
	for i in range(0, idx):
		ans += s[i]
	return ans


# Driver code
s = "ab#c"
t = "ad#c"
if(removeBackspace(s) == removeBackspace(t)):
	print("TRUE")
else:
	print("FALSE")


........................................................................................................................................................
# Question 8
# You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.
# Example 1:
coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
# Output:true

# ==>
class Solution:
    def solve(self, coordinates):
        (x0, y0), (x1, y1) = coordinates[0], coordinates[1]
        for i in range(2, len(coordinates)):
           x, y = coordinates[i]
           if (x0 - x1) * (y1 - y) != (x1 - x) * (y0 - y1):
              return False
        return True
ob = Solution()
coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
print(ob.solve(coordinates))
		
	



















    